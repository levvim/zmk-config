#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

#define DEF 0
#define MAC 1
#define LWR 2
#define RSE 3
#define ADJ 4
#define GME 5
#define LCK 6

#define BT0 BT_SEL 0
#define BT1 BT_SEL 1
#define BT2 BT_SEL 2
#define BT3 BT_SEL 3
#define BT4 BT_SEL 4

&mt {
    flavor = "tap-preferred";
    tapping-term-ms = <400>;
};

/ {
    behaviors {
        td_ag: tap_dance_mod_tap {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_MOD_TAP";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp LALT>, <&kp LGUI>;
        };
        td_ga: tap_dance_mod_tap {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_MOD_TAP";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp LGUI>, <&kp LALT>;
        };
        td_e3: tap_dance_mod_tap {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_MOD_TAP";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp E>, <&kp N3>;
        };
    };
    conditional_layers {
        compatible = "zmk,conditional-layers";

        tri_layer {
            if-layers = <LWR RSE>;
            then-layer = <ADJ>;
        };
    };
    
// -----------------------------------------------------------------------------------------
        keymap {
                compatible = "zmk,keymap";

                def_layer {
                            label = "DEF";
// -----------------------------------------------------------------------------------------
// |  TAB |  Q  |  W    |  E    |  R   |T/RSE|   |Y/LWR|  U   |  I    |  O   |  P   | BKSP |
// | SHFT |A/CTRL|S/SHFT|  D    |  F   |G/LWR|   |H/RSE|  J   |  K    |L/SHFT|;/CTRL|  '   |
// | CTRL |  Z  |  X    |  C    |  V   |  B  |   |  N  |  M   |  ,    |  .   |  /   | ENT  |
//                      |  ALT  | LWR  | SPC |   | SPC | RSE  |  GUI  |
                        bindings = <
   &kp TAB   &kp Q        &kp W        &kp E      &kp R   &lt 2 T      &lt 1 Y   &kp U    &kp I      &kp O        &kp P          &kp BSPC
   &kp LSHFT &mt LCTRL A  &mt LSHIFT S &kp D      &kp F   &lt 1 G      &lt 2 H   &kp J    &kp K      &mt LSHIFT L &mt LCTRL SEMI &kp SQT
   &kp LCTRL &kp Z        &kp X        &kp C      &kp V   &kp B        &kp N     &kp M    &kp COMMA  &kp DOT      &kp FSLH       &kp RET
                                       &kp LALT   &mo 2   &kp SPACE    &kp SPACE &mo 3    &kp LGUI
                        >;
                };
                
                mac_layer {
                            label = "MAC";
// -----------------------------------------------------------------------------------------
// |  TAB |  Q  |  W    |  E    |  R   |T/RSE|   |Y/LWR|  U   |  I    |  O   |  P   | BKSP |
// | SHFT |A/CTRL|S/SHFT|  D    |  F   |G/LWR|   |H/RSE|  J   |  K    |L/SHFT|;/CTRL|  '   |
// | CTRL |  Z  |  X    |  C    |  V   |  B  |   |  N  |  M   |  ,    |  .   |  /   | ENT  |
//                      |  GUI  | LWR  | SPC |   | SPC | RSE  |  ALT  |
                        bindings = <
   &kp TAB   &kp Q        &kp W        &kp E      &kp R   &lt 2 T      &lt 1 Y   &kp U    &kp I      &kp O        &kp P          &kp BSPC
   &kp LSHFT &mt LCTRL A  &mt LSHIFT S &kp D      &kp F   &lt 1 G      &lt 2 H   &kp J    &kp K      &mt LSHIFT L &mt LCTRL SEMI &kp SQT
   &kp LCTRL &kp Z        &kp X        &kp C      &kp V   &kp B        &kp N     &kp M    &kp COMMA  &kp DOT      &kp FSLH       &kp RET
                                       &kp LGUI   &mo 2   &kp SPACE    &kp SPACE &mo 3    &kp LALT
                        >;
                };
                
                lwr_layer {
                            label = "LWR";
// -----------------------------------------------------------------------------------------
// |  ESC |  1  |  2  |  3  |  4  |  5  |   |  6   |  7  |  8  |  9  |  0  | DEL  |
// | SHFT |  4  |  5  |  6  |     |     |   | LFT  | DWN |  UP | RGT |     |      |
// | CTRL |  7  |  8  |  9  |  0  | ENT |   | HOME |PG_DN|PG_UP| END |     |      |
//                    | GUI |     | SPC |   | BKSP |     | ALT |
                        bindings = <
   &kp ESC    &kp N1  &kp N2  &kp N3    &kp N4  &kp N5       &kp N6    &kp N7    &kp N8    &kp N9    &kp N0  &kp DEL
   &kp LSHFT  &kp N4  &kp N5  &kp N6    &none   &none        &kp LEFT  &kp DOWN  &kp UP    &kp RIGHT &trans  &trans
   &kp LCTRL  &kp N7  &kp N8  &kp N9    &kp N0  &kp RET      &kp HOME  &kp PG_DN &kp PG_UP &kp END   &trans  &trans
                              &kp LGUI  &trans  &kp SPACE    &kp BSPC  &trans    &kp LALT
                        >;
                };

                rse_layer {
                            label = "RSE";
// -----------------------------------------------------------------------------------------
// |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
// | SHFT |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |   `  |
// | CTRL |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
//                    | GUI |     | SPC |   | ENT |     | ALT |
                        bindings = <
   &kp  TAB  &kp EXCL &kp AT &kp HASH &kp DLLR &kp PRCNT   &kp CARET &kp AMPS  &kp KP_MULTIPLY &kp LPAR &kp RPAR &kp BSPC
   &kp LCTRL &trans   &trans &trans   &trans   &trans      &kp MINUS &kp EQUAL &kp LBKT        &kp RBKT &kp BSLH &kp GRAVE
   &kp LSHFT &trans   &trans &trans   &trans   &trans      &kp UNDER &kp PLUS  &kp LBRC        &kp RBRC &kp PIPE &kp TILDE
                    	     &kp LGUI &trans   &kp SPACE   &kp RET   &trans    &kp RALT
                        >;
                };

                adj_layer {
                            label = "ADJ";
// -----------------------------------------------------------------------------------------
// |  F1  |  F2  |  F3  |  F4  |  F5  |  F6  |   | F7  |  F8 | F9  | F10  |  F11 |L_LOCK |
// | CLCK |VOL_DN|VOL_UP| MUTE |      |      |   |     |     | PREV|PAUSE | NEXT |L_GAME |
// |BT_CLR|  BT0 |  BT1 | BT2  |  BT3 | BT4  |   |O_USB|O_BLE|     |      |      |L_MAC  |
//                      |      |      |      |   |O_TOG|     |     |        
            bindings = <
                &kp F1      &kp F2       &kp F3       &kp F4     &kp F5   &kp F6         &kp F7       &kp F8       &kp F9     &kp F10     &kp F11    &tog LCK
                &kp CLCK    &kp C_VOL_DN &kp C_VOL_UP &kp C_MUTE &trans   &trans         &trans       &trans       &kp C_PREV  &kp C_PP   &kp C_NEXT &tog GME
                &bt BT_CLR  &bt BT0      &bt BT1      &bt BT2    &bt BT3  &bt BT4        &out OUT_USB &out OUT_BLE &trans     &trans      &trans     &tog MAC
                                                      &trans     &trans   &trans         &trans       &trans       &trans
            >;
        };
        
        gme_layer {
                    label = "GME";
// -----------------------------------------------------------------------------------------
// | TAB  |  Q  |  W  |  E  |  R  |  T  |   |     |     |     |     |     |      |
// | SHFT |  A  |  S  |  D  |  F  |  G  |   |     |     |     |     |     | EXIT |
// | CTRL |  Z  |  X  |  C  |  V  |  B  |   |     |     |     |     |     |      |
//                    |  Y  | LWR | SPC |   | ENT | RSE | ALT |        
            bindings = <
                &kp TAB   &kp Q &kp W &kp E &kp R  &kp T        &trans  &trans  &trans   &trans  &trans  &trans
                &kp LSHFT &kp A &kp S &kp D &kp F  &kp G        &trans  &trans  &trans   &trans  &trans  &trans
                &kp LCTRL &kp Z &kp X &kp C &kp V  &kp B        &trans  &trans  &trans   &trans  &trans  &trans
                                      &kp Y &mo 2  &kp SPACE    &kp RET &mo 3   &kp RALT
            >;
        };

// The Lower+Raise+Backspace binding toggles a "soft lock" mode that effective disables
// other keys, allowing the keyboard to be transported without spurious key presses. (Note
// that the Lower, Raise, and Backspace positions must be bound to &trans to allow the lock
// layer to be toggled again after it's activated.)
//
// If https://github.com/zmkfirmware/zmk/issues/405 is implemented, this layer can be
// replaced by a native behavior in the future.
        lck_layer {
                    label = "LCK";
            bindings = <
                &none      &none      &none      &none      &none      &none                            &none      &none      &none      &none      &none      &trans
                &none      &none      &none      &none      &none      &none                            &none      &none      &none      &none      &none      &none
                &none      &none      &none      &none      &none      &none                            &none      &none      &none      &none      &none      &none
                                                            &none      &trans     &none      &none      &trans     &none
            >;
        };
                
        };
};
